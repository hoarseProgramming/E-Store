@using EStore.Application.ApplicationModels
@using EStore.Application.Events
@using EStore.Contracts.Requests
@using EStore.Contracts.Responses
@using EStore.Application.Mapping
@using System.Net.Http.Headers
@inject NavigationManager NavigationManager
@inject IHttpClientFactory Factory;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;

<MudPaper Height="100%" Width="100%">
	<MudPaper Height="5%" Class="d-flex justify-center align-center mud-width-full pa-2">
		Items in cart:
	</MudPaper>
	<MudPaper Height="87%" Width="100%" Class="overflow-scroll overflow-x-hidden">
		<MudGrid Spacing="1">
			@foreach (var product in Products)
			{
				<MudItem xs="12">
					<ProductInCart Product="product"></ProductInCart>
				</MudItem>
			}
		</MudGrid>
	</MudPaper>
	<MudPaper Height="8%" Class="d-flex justify-center align-center">
		<MudButton OnClick="PlaceOrder">Place order</MudButton>
	</MudPaper>
</MudPaper>

@code {
	public List<StoreProduct> Products { get; set; } = [];
	private HttpClient _httpClient;

	protected override async Task OnInitializedAsync()
	{
		_httpClient = Factory.CreateClient("backend");

		CartPublisher.CartStateChanged += async () => await UpdateCartAsync();

		var localStorageCart = await LocalStorage.GetItemAsync<List<StoreProduct>>("Cart");

		if (localStorageCart is null)
		{
			var newList = new List<StoreProduct>();
			await LocalStorage.SetItemAsync<List<StoreProduct>>("Cart", newList);
			Products = newList;
			await base.OnInitializedAsync();
			return;
		}

		Products = localStorageCart;
		await base.OnInitializedAsync();
		await UpdateCartAsync();
	}

	private async Task UpdateCartAsync()
	{
		Products = await LocalStorage.GetItemAsync<List<StoreProduct>>("Cart");
		var productsInCart = 0;
		foreach (var product in Products)
		{
			productsInCart += product.Quantity;
		}
		Globals.ProductsInCart = productsInCart;
		await CartPublisher.OnMainLayoutCartChanged();
		StateHasChanged();
	}

	private async Task PlaceOrder()
	{
		var customerId = await LocalStorage.GetItemAsync<string>("CurrentCustomerId");

		if (customerId is not null)
		{
			var token = await LocalStorage.GetItemAsync<string>("eStoreToken");
			_httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

			var request = new CreateOrderRequest()
				{
					CustomerId = Guid.Parse(customerId),
					OrderProducts = Products.MapToRequest()
				};

			var response = await _httpClient.PostAsJsonAsync<CreateOrderRequest>("api/orders", request);

			if (response.IsSuccessStatusCode)
			{
				Products.Clear();
				await LocalStorage.SetItemAsync<List<StoreProduct>>("Cart", Products);
				Globals.ProductsInCart = 0;
				Snackbar.Add("Order placed!", Severity.Success);
				await CartPublisher.OnMainLayoutCartChanged();
				Globals.ShoppingCartOpen = false;
			}
		}
		else
		{
			Snackbar.Add("Please login before placing order", Severity.Warning);
			Globals.ShoppingCartOpen = false;
			NavigationManager.NavigateTo("Account");
		}
	}
}
