@using EStore.Application.ApplicationModels
@using EStore.Application.Events
@using EStore.Contracts.Requests
@using EStore.Contracts.Responses
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;

<MudPaper Height="300px" Width="100%">
	<div class="ma-2">
		<MudGrid Spacing="2">
			<MudItem xs="12">
				<div class="d-flex justify-center">
					<h3>@Product.ProductName</h3>
				</div>
			</MudItem>
			<MudItem xs="12">
				<div class="d-flex justify-center">
					<MudImage Class="rounded-lg" Height="200" Width="200" Src="@Product.ImageUrl" FallbackSrc="Media/Images/no-image.png"></MudImage>
				</div>
			</MudItem>
			<MudItem xs="6">
				<div class="d-flex justify-center align-center">
					<h3>@Product.Price :-</h3>
				</div>
			</MudItem>
			<MudItem xs="6">
				<div class="d-flex justify-center align-center">
					<MudButton Variant="Variant.Filled" OnClick="AddToCart">Buy</MudButton>
				</div>
			</MudItem>
		</MudGrid>
	</div>
</MudPaper>

@code {
	[Parameter]
	public StoreProduct Product { get; set; }

	public async Task AddToCart(){
		var localStorageCart = await LocalStorage.GetItemAsync<List<StoreProduct>>("Cart");

		if (localStorageCart.Any(p => p.ProductNumber == Product.ProductNumber))
		{
			return;
		}

		localStorageCart.Add(Product);

		await LocalStorage.SetItemAsync<List<StoreProduct>>("Cart", localStorageCart);

		await CartPublisher.OnCartStateChanged();
	}
}
