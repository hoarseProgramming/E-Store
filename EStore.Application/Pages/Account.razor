@page "/account"

@using EStore.Application.Dtos
@using EStore.Application.Events
@using EStore.Contracts.Requests
@using EStore.Contracts.Responses
@using System.ComponentModel.DataAnnotations

@inject IHttpClientFactory Factory;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;
@inject IDialogService DialogService


<PageTitle>Account</PageTitle>

<MudPaper Height="calc(100vh - 65px)" Width="100%" Class="d-flex justify-center align-start">
    <MudForm @bind-IsValid="@_success">
        <MudTextField @ref="_email" T="string" Label="Email" Required="true" RequiredError="Email is required!"
                      Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
        <MudTextField @ref="_password" T="string" Label="Password" Required="true" />
        <MudGrid Class="my-2">
            <MudItem Class="xs-4">
                <MudButton OnClick="LoginAsync" Variant="Variant.Filled" Color="Color.Primary">Login</MudButton>
            </MudItem>
            <MudItem Class="xs-4">
                <MudButton OnClick="LogoutAsync" Variant="Variant.Filled" Color="Color.Primary">Logout</MudButton>
            </MudItem>
            <MudItem Class="xs-4">
                <MudButton OnClick="OpenRegisterDialogAsync" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>
    <p>@_accountInfo</p>
</MudPaper>





<AuthorizeView AllowedRole="ADMIN">
    <p>Inne</p>
</AuthorizeView>

@code
{
    private bool _success;

    private HttpClient _httpClient;

    private MudTextField<string> _email;
    private MudTextField<string> _password;

    private string _accountInfo = "";

    protected override async Task OnInitializedAsync()
    {
        _httpClient = Factory.CreateClient("backend");

        await base.OnInitializedAsync();
    }

    private async Task OpenRegisterDialogAsync()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<RegisterDialog>("Register", options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _accountInfo = (string)result.Data;
        }
    }
    private async Task LoginAsync()
    {
        var result = await _httpClient.PostAsJsonAsync("api/login", new
        {
            email = _email.Value,
            password = _password.Value
        });


        if (result.IsSuccessStatusCode)
        {
            var token = await result.Content.ReadFromJsonAsync<LoginResponse>();

            if (token is not null)
            {
                await LocalStorage.SetItemAsync("eStoreToken", token.AccessToken);
                _accountInfo = "Login successful";
                await AuthPublisher.OnAuthenticationStateChanged();
            }
        }
        else
        {
            _accountInfo = "Didn't work";
        }
    }

    private async Task LogoutAsync()
    {
        await LocalStorage.RemoveItemAsync("eStoreToken");
        await AuthPublisher.OnAuthenticationStateChanged();
    }
}