@page "/account"

@using EStore.Application.ApplicationModels
@using EStore.Application.Dtos
@using EStore.Application.Events
@using EStore.Application.Interfaces
@using EStore.Application.Mapping
@using EStore.Contracts.Requests
@using EStore.Contracts.Responses
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers

@inject IHttpClientFactory Factory;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;
@inject IDialogService DialogService
@inject IAuthenticationStateProvider StateProvider


<PageTitle>Account</PageTitle>

<MudPaper Height="calc(100vh - 65px)" Width="100%" Class="d-flex justify-center align-start">
    <MudForm @bind-IsValid="@_success">
        <MudTextField @ref="_email" T="string" Label="Email" Required="true" RequiredError="Email is required!"
        Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
        <MudTextField @ref="_password" T="string" Label="Password" InputType="InputType.Password" Required="true" />
        <MudGrid Class="my-2">
            <MudItem Class="xs-6">
                <MudButton OnClick="LoginAsync" Variant="Variant.Filled" Color="Color.Primary">Login</MudButton>
            </MudItem>
            <MudItem Class="xs-6">
                <MudButton OnClick="LogoutAsync" Variant="Variant.Filled" Color="Color.Primary">Logout</MudButton>
            </MudItem>
        </MudGrid>
        <MudGrid Class="my-2">
            <MudItem Class="xs-6">
                <MudButton OnClick="OpenRegisterDialogAsync" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
            </MudItem>
            <MudItem Class="xs-6">
                <MudButton OnClick="OpenUpdateCustomerDialogAsync" Disabled="!_isAuthenticated" Variant="Variant.Filled" Color="Color.Primary">Update user info</MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>
</MudPaper>

@code
{
    private bool _isAuthenticated;
    private bool _success;
    private bool _shouldShowLoginMessage = true;

    private HttpClient _httpClient;

    private MudTextField<string> _email;
    private MudTextField<string> _password;

    protected override async Task OnInitializedAsync()
    {
        AuthPublisher.AuthenticationStateChanged += async () => await UpdateState();
        _httpClient = Factory.CreateClient("backend");

        await UpdateState();
        await base.OnInitializedAsync();
    }

    public async Task UpdateState()
    {
        _isAuthenticated = await StateProvider.IsAuthenticatedAsync();

        StateHasChanged();
    }

    private async Task OpenRegisterDialogAsync()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<RegisterDialog>("Register", options);

        var result = await dialog.Result;
    }

    private async Task OpenUpdateCustomerDialogAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("eStoreToken");
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var userInfo = await _httpClient.GetFromJsonAsync<UserInfoResponse>("api/user/info");

        if (userInfo.CustomerId is null)
        {
            Snackbar.Add("Can't update Admin info", Severity.Error);
            return;
        }

        var customer = await _httpClient.GetFromJsonAsync<CustomerResponse>($"api/customers/{userInfo.CustomerId}");

        var parameters = new DialogParameters<UpdateCustomerDialog>{
            { d => d.Customer, customer.MapToAppCustomer() }
        };
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<UpdateCustomerDialog>("Register", parameters, options);

        var result = await dialog.Result;

        var loginInfo = (LoginInfo)result.Data;

        if (!result.Canceled)
        {
            _email.Value = loginInfo.Email;
            _password.Value = loginInfo.Password;
            _shouldShowLoginMessage = false;
            await LoginAsync();
            _shouldShowLoginMessage = true;
            Snackbar.Add("Updated user info", Severity.Success);
            StateHasChanged();
        }
    }
    private async Task LoginAsync()
    {
        var result = await _httpClient.PostAsJsonAsync("api/user/login", new
        {
            email = _email.Value,
            password = _password.Value
        });

        if (result.IsSuccessStatusCode)
        {
            var token = await result.Content.ReadFromJsonAsync<LoginResponse>();

            if (token is not null)
            {
                await LocalStorage.SetItemAsync("eStoreToken", token.AccessToken);

                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.AccessToken);

                var userInfo = await _httpClient.GetFromJsonAsync<UserInfoResponse>("api/user/info");

                if (userInfo is not null)
                {
                    await LocalStorage.SetItemAsync("CurrentUserId", userInfo.Id);

                    var customerId = userInfo.CustomerId;

                    if (customerId is not null)
                    {
                        await LocalStorage.SetItemAsync("CurrentCustomerId", customerId);
                    }
                    if (_shouldShowLoginMessage)
                    {
                        Snackbar.Add("Logged in!", Severity.Success);
                    }
                }

                await AuthPublisher.OnAuthenticationStateChanged();
            }
        }
        else
        {
            Snackbar.Add("Login failed.", Severity.Error);
        }
    }

    private async Task LogoutAsync()
    {
        await LocalStorage.RemoveItemAsync("eStoreToken");
        await LocalStorage.RemoveItemAsync("CurrentCustomerId");
        await LocalStorage.RemoveItemAsync("CurrentUserId");
        await AuthPublisher.OnAuthenticationStateChanged();
    }
}