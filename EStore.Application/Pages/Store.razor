@page "/store"
@using EStore.Application.ApplicationModels
@using EStore.Contracts.Requests
@using EStore.Contracts.Responses
@using EStore.Application.Mapping

@inject IHttpClientFactory Factory;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;

<MudStack Row="true" Wrap="Wrap.Wrap" AlignItems="AlignItems.Start">
    @foreach (var product in Products)
    {
        <ProductComponent Product="product"></ProductComponent>
    }
</MudStack>


@code {
    private HttpClient _httpClient;

    private List<StoreProduct> Products = [];

    private List<StoreProduct> _productsInCart = [];

    protected override async Task OnInitializedAsync()
    {
        _httpClient = Factory.CreateClient("backend");

        var productsResponse = await _httpClient.GetFromJsonAsync<ProductsResponse>("api/products");


        if (productsResponse is not null)
        {
            Products = productsResponse.MapToStoreProducts().ToList();
        }

        var localStorageCart = await LocalStorage.GetItemAsync<List<StoreProduct>>("Cart");

        // StateHasChanged();

        await base.OnInitializedAsync();
    }
}
